Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> qasm
Rule 2     qasm -> format
Rule 3     format -> FORMAT_SPEC
Rule 4     qasm -> qasm STDGATES
Rule 5     qasm -> qasm circuit
Rule 6     circuit -> new_reg circuit
Rule 7     circuit -> circuit gate_op
Rule 8     circuit -> circuit measurement
Rule 9     new_reg -> QUBIT [ NATURAL_NUMBER ] ID ;
Rule 10    new_reg -> BIT [ NATURAL_NUMBER ] ID ;
Rule 11    gate_op -> ID qargs
Rule 12    gate_op -> ID ( params ) qargs
Rule 13    measurement -> carg ASSIGN MEASURE qarg ;
Rule 14    carg -> ID [ NATURAL_NUMBER ]
Rule 15    carg -> ID
Rule 16    qargs -> qarg , qargs
Rule 17    qargs -> qarg ;
Rule 18    qarg -> ID
Rule 19    qarg -> ID [ NATURAL_NUMBER ]
Rule 20    params -> expr , params
Rule 21    params -> expr
Rule 22    expr -> term
Rule 23    expr -> ( expr )
Rule 24    expr -> ID ( expr )
Rule 25    expr -> - expr
Rule 26    expr -> + expr
Rule 27    expr -> expr * expr
Rule 28    expr -> expr / expr
Rule 29    expr -> expr + expr
Rule 30    expr -> expr - expr
Rule 31    expr -> expr ^ expr
Rule 32    term -> NUMBER
Rule 33    term -> NATURAL_NUMBER
Rule 34    term -> PI
Rule 35    circuit -> empty
Rule 36    qasm -> empty
Rule 37    empty -> <empty>

Terminals, with rules where they appear

(                    : 12 23 24
)                    : 12 23 24
*                    : 27
+                    : 26 29
,                    : 16 20
-                    : 25 30
/                    : 28
;                    : 9 10 13 17
ASSIGN               : 13
BIT                  : 10
FORMAT_SPEC          : 3
ID                   : 9 10 11 12 14 15 18 19 24
MEASURE              : 13
NATURAL_NUMBER       : 9 10 14 19 33
NUMBER               : 32
PI                   : 34
QUBIT                : 9
STDGATES             : 4
[                    : 9 10 14 19
]                    : 9 10 14 19
^                    : 31
error                : 

Nonterminals, with rules where they appear

carg                 : 13
circuit              : 5 6 7 8
empty                : 35 36
expr                 : 20 21 23 24 25 26 27 27 28 28 29 29 30 30 31 31
format               : 2
gate_op              : 7
measurement          : 8
new_reg              : 6
params               : 12 20
qarg                 : 13 16 17
qargs                : 11 12 16
qasm                 : 1 4 5
start                : 0
term                 : 22

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . qasm
    (2) qasm -> . format
    (4) qasm -> . qasm STDGATES
    (5) qasm -> . qasm circuit
    (36) qasm -> . empty
    (3) format -> . FORMAT_SPEC
    (37) empty -> .

    FORMAT_SPEC     shift and go to state 5
    STDGATES        reduce using rule 37 (empty -> .)
    QUBIT           reduce using rule 37 (empty -> .)
    BIT             reduce using rule 37 (empty -> .)
    ID              reduce using rule 37 (empty -> .)
    $end            reduce using rule 37 (empty -> .)

    start                          shift and go to state 1
    qasm                           shift and go to state 2
    format                         shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> start .



state 2

    (1) start -> qasm .
    (4) qasm -> qasm . STDGATES
    (5) qasm -> qasm . circuit
    (6) circuit -> . new_reg circuit
    (7) circuit -> . circuit gate_op
    (8) circuit -> . circuit measurement
    (35) circuit -> . empty
    (9) new_reg -> . QUBIT [ NATURAL_NUMBER ] ID ;
    (10) new_reg -> . BIT [ NATURAL_NUMBER ] ID ;
    (37) empty -> .

  ! shift/reduce conflict for STDGATES resolved as shift
  ! shift/reduce conflict for QUBIT resolved as shift
  ! shift/reduce conflict for BIT resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (start -> qasm .)
    $end            reduce using rule 1 (start -> qasm .)
    STDGATES        shift and go to state 6
    QUBIT           shift and go to state 10
    BIT             shift and go to state 11
    ID              reduce using rule 37 (empty -> .)

  ! STDGATES        [ reduce using rule 37 (empty -> .) ]
  ! QUBIT           [ reduce using rule 37 (empty -> .) ]
  ! BIT             [ reduce using rule 37 (empty -> .) ]
  ! $end            [ reduce using rule 37 (empty -> .) ]

    circuit                        shift and go to state 7
    new_reg                        shift and go to state 8
    empty                          shift and go to state 9

state 3

    (2) qasm -> format .

    STDGATES        reduce using rule 2 (qasm -> format .)
    QUBIT           reduce using rule 2 (qasm -> format .)
    BIT             reduce using rule 2 (qasm -> format .)
    ID              reduce using rule 2 (qasm -> format .)
    $end            reduce using rule 2 (qasm -> format .)


state 4

    (36) qasm -> empty .

    STDGATES        reduce using rule 36 (qasm -> empty .)
    QUBIT           reduce using rule 36 (qasm -> empty .)
    BIT             reduce using rule 36 (qasm -> empty .)
    ID              reduce using rule 36 (qasm -> empty .)
    $end            reduce using rule 36 (qasm -> empty .)


state 5

    (3) format -> FORMAT_SPEC .

    STDGATES        reduce using rule 3 (format -> FORMAT_SPEC .)
    QUBIT           reduce using rule 3 (format -> FORMAT_SPEC .)
    BIT             reduce using rule 3 (format -> FORMAT_SPEC .)
    ID              reduce using rule 3 (format -> FORMAT_SPEC .)
    $end            reduce using rule 3 (format -> FORMAT_SPEC .)


state 6

    (4) qasm -> qasm STDGATES .

    STDGATES        reduce using rule 4 (qasm -> qasm STDGATES .)
    QUBIT           reduce using rule 4 (qasm -> qasm STDGATES .)
    BIT             reduce using rule 4 (qasm -> qasm STDGATES .)
    ID              reduce using rule 4 (qasm -> qasm STDGATES .)
    $end            reduce using rule 4 (qasm -> qasm STDGATES .)


state 7

    (5) qasm -> qasm circuit .
    (7) circuit -> circuit . gate_op
    (8) circuit -> circuit . measurement
    (11) gate_op -> . ID qargs
    (12) gate_op -> . ID ( params ) qargs
    (13) measurement -> . carg ASSIGN MEASURE qarg ;
    (14) carg -> . ID [ NATURAL_NUMBER ]
    (15) carg -> . ID

  ! shift/reduce conflict for ID resolved as shift
    STDGATES        reduce using rule 5 (qasm -> qasm circuit .)
    QUBIT           reduce using rule 5 (qasm -> qasm circuit .)
    BIT             reduce using rule 5 (qasm -> qasm circuit .)
    $end            reduce using rule 5 (qasm -> qasm circuit .)
    ID              shift and go to state 14

  ! ID              [ reduce using rule 5 (qasm -> qasm circuit .) ]

    gate_op                        shift and go to state 12
    measurement                    shift and go to state 13
    carg                           shift and go to state 15

state 8

    (6) circuit -> new_reg . circuit
    (6) circuit -> . new_reg circuit
    (7) circuit -> . circuit gate_op
    (8) circuit -> . circuit measurement
    (35) circuit -> . empty
    (9) new_reg -> . QUBIT [ NATURAL_NUMBER ] ID ;
    (10) new_reg -> . BIT [ NATURAL_NUMBER ] ID ;
    (37) empty -> .

  ! shift/reduce conflict for QUBIT resolved as shift
  ! shift/reduce conflict for BIT resolved as shift
    QUBIT           shift and go to state 10
    BIT             shift and go to state 11
    ID              reduce using rule 37 (empty -> .)
    STDGATES        reduce using rule 37 (empty -> .)
    $end            reduce using rule 37 (empty -> .)

  ! QUBIT           [ reduce using rule 37 (empty -> .) ]
  ! BIT             [ reduce using rule 37 (empty -> .) ]

    new_reg                        shift and go to state 8
    circuit                        shift and go to state 16
    empty                          shift and go to state 9

state 9

    (35) circuit -> empty .

    ID              reduce using rule 35 (circuit -> empty .)
    STDGATES        reduce using rule 35 (circuit -> empty .)
    QUBIT           reduce using rule 35 (circuit -> empty .)
    BIT             reduce using rule 35 (circuit -> empty .)
    $end            reduce using rule 35 (circuit -> empty .)


state 10

    (9) new_reg -> QUBIT . [ NATURAL_NUMBER ] ID ;

    [               shift and go to state 17


state 11

    (10) new_reg -> BIT . [ NATURAL_NUMBER ] ID ;

    [               shift and go to state 18


state 12

    (7) circuit -> circuit gate_op .

    ID              reduce using rule 7 (circuit -> circuit gate_op .)
    STDGATES        reduce using rule 7 (circuit -> circuit gate_op .)
    QUBIT           reduce using rule 7 (circuit -> circuit gate_op .)
    BIT             reduce using rule 7 (circuit -> circuit gate_op .)
    $end            reduce using rule 7 (circuit -> circuit gate_op .)


state 13

    (8) circuit -> circuit measurement .

    ID              reduce using rule 8 (circuit -> circuit measurement .)
    STDGATES        reduce using rule 8 (circuit -> circuit measurement .)
    QUBIT           reduce using rule 8 (circuit -> circuit measurement .)
    BIT             reduce using rule 8 (circuit -> circuit measurement .)
    $end            reduce using rule 8 (circuit -> circuit measurement .)


state 14

    (11) gate_op -> ID . qargs
    (12) gate_op -> ID . ( params ) qargs
    (14) carg -> ID . [ NATURAL_NUMBER ]
    (15) carg -> ID .
    (16) qargs -> . qarg , qargs
    (17) qargs -> . qarg ;
    (18) qarg -> . ID
    (19) qarg -> . ID [ NATURAL_NUMBER ]

    (               shift and go to state 21
    [               shift and go to state 22
    ASSIGN          reduce using rule 15 (carg -> ID .)
    ID              shift and go to state 19

    qargs                          shift and go to state 20
    qarg                           shift and go to state 23

state 15

    (13) measurement -> carg . ASSIGN MEASURE qarg ;

    ASSIGN          shift and go to state 24


state 16

    (6) circuit -> new_reg circuit .
    (7) circuit -> circuit . gate_op
    (8) circuit -> circuit . measurement
    (11) gate_op -> . ID qargs
    (12) gate_op -> . ID ( params ) qargs
    (13) measurement -> . carg ASSIGN MEASURE qarg ;
    (14) carg -> . ID [ NATURAL_NUMBER ]
    (15) carg -> . ID

  ! shift/reduce conflict for ID resolved as shift
    STDGATES        reduce using rule 6 (circuit -> new_reg circuit .)
    QUBIT           reduce using rule 6 (circuit -> new_reg circuit .)
    BIT             reduce using rule 6 (circuit -> new_reg circuit .)
    $end            reduce using rule 6 (circuit -> new_reg circuit .)
    ID              shift and go to state 14

  ! ID              [ reduce using rule 6 (circuit -> new_reg circuit .) ]

    gate_op                        shift and go to state 12
    measurement                    shift and go to state 13
    carg                           shift and go to state 15

state 17

    (9) new_reg -> QUBIT [ . NATURAL_NUMBER ] ID ;

    NATURAL_NUMBER  shift and go to state 25


state 18

    (10) new_reg -> BIT [ . NATURAL_NUMBER ] ID ;

    NATURAL_NUMBER  shift and go to state 26


state 19

    (18) qarg -> ID .
    (19) qarg -> ID . [ NATURAL_NUMBER ]

    ,               reduce using rule 18 (qarg -> ID .)
    ;               reduce using rule 18 (qarg -> ID .)
    [               shift and go to state 27


state 20

    (11) gate_op -> ID qargs .

    ID              reduce using rule 11 (gate_op -> ID qargs .)
    STDGATES        reduce using rule 11 (gate_op -> ID qargs .)
    QUBIT           reduce using rule 11 (gate_op -> ID qargs .)
    BIT             reduce using rule 11 (gate_op -> ID qargs .)
    $end            reduce using rule 11 (gate_op -> ID qargs .)


state 21

    (12) gate_op -> ID ( . params ) qargs
    (20) params -> . expr , params
    (21) params -> . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    params                         shift and go to state 30
    expr                           shift and go to state 31
    term                           shift and go to state 32

state 22

    (14) carg -> ID [ . NATURAL_NUMBER ]

    NATURAL_NUMBER  shift and go to state 38


state 23

    (16) qargs -> qarg . , qargs
    (17) qargs -> qarg . ;

    ,               shift and go to state 39
    ;               shift and go to state 40


state 24

    (13) measurement -> carg ASSIGN . MEASURE qarg ;

    MEASURE         shift and go to state 41


state 25

    (9) new_reg -> QUBIT [ NATURAL_NUMBER . ] ID ;

    ]               shift and go to state 42


state 26

    (10) new_reg -> BIT [ NATURAL_NUMBER . ] ID ;

    ]               shift and go to state 43


state 27

    (19) qarg -> ID [ . NATURAL_NUMBER ]

    NATURAL_NUMBER  shift and go to state 44


state 28

    (24) expr -> ID . ( expr )

    (               shift and go to state 45


state 29

    (23) expr -> ( . expr )
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 46
    term                           shift and go to state 32

state 30

    (12) gate_op -> ID ( params . ) qargs

    )               shift and go to state 47


state 31

    (20) params -> expr . , params
    (21) params -> expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

    ,               shift and go to state 48
    )               reduce using rule 21 (params -> expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53


state 32

    (22) expr -> term .

    ,               reduce using rule 22 (expr -> term .)
    *               reduce using rule 22 (expr -> term .)
    /               reduce using rule 22 (expr -> term .)
    +               reduce using rule 22 (expr -> term .)
    -               reduce using rule 22 (expr -> term .)
    ^               reduce using rule 22 (expr -> term .)
    )               reduce using rule 22 (expr -> term .)


state 33

    (25) expr -> - . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 54
    term                           shift and go to state 32

state 34

    (26) expr -> + . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 55
    term                           shift and go to state 32

state 35

    (32) term -> NUMBER .

    ,               reduce using rule 32 (term -> NUMBER .)
    *               reduce using rule 32 (term -> NUMBER .)
    /               reduce using rule 32 (term -> NUMBER .)
    +               reduce using rule 32 (term -> NUMBER .)
    -               reduce using rule 32 (term -> NUMBER .)
    ^               reduce using rule 32 (term -> NUMBER .)
    )               reduce using rule 32 (term -> NUMBER .)


state 36

    (33) term -> NATURAL_NUMBER .

    ,               reduce using rule 33 (term -> NATURAL_NUMBER .)
    *               reduce using rule 33 (term -> NATURAL_NUMBER .)
    /               reduce using rule 33 (term -> NATURAL_NUMBER .)
    +               reduce using rule 33 (term -> NATURAL_NUMBER .)
    -               reduce using rule 33 (term -> NATURAL_NUMBER .)
    ^               reduce using rule 33 (term -> NATURAL_NUMBER .)
    )               reduce using rule 33 (term -> NATURAL_NUMBER .)


state 37

    (34) term -> PI .

    ,               reduce using rule 34 (term -> PI .)
    *               reduce using rule 34 (term -> PI .)
    /               reduce using rule 34 (term -> PI .)
    +               reduce using rule 34 (term -> PI .)
    -               reduce using rule 34 (term -> PI .)
    ^               reduce using rule 34 (term -> PI .)
    )               reduce using rule 34 (term -> PI .)


state 38

    (14) carg -> ID [ NATURAL_NUMBER . ]

    ]               shift and go to state 56


state 39

    (16) qargs -> qarg , . qargs
    (16) qargs -> . qarg , qargs
    (17) qargs -> . qarg ;
    (18) qarg -> . ID
    (19) qarg -> . ID [ NATURAL_NUMBER ]

    ID              shift and go to state 19

    qarg                           shift and go to state 23
    qargs                          shift and go to state 57

state 40

    (17) qargs -> qarg ; .

    ID              reduce using rule 17 (qargs -> qarg ; .)
    STDGATES        reduce using rule 17 (qargs -> qarg ; .)
    QUBIT           reduce using rule 17 (qargs -> qarg ; .)
    BIT             reduce using rule 17 (qargs -> qarg ; .)
    $end            reduce using rule 17 (qargs -> qarg ; .)


state 41

    (13) measurement -> carg ASSIGN MEASURE . qarg ;
    (18) qarg -> . ID
    (19) qarg -> . ID [ NATURAL_NUMBER ]

    ID              shift and go to state 19

    qarg                           shift and go to state 58

state 42

    (9) new_reg -> QUBIT [ NATURAL_NUMBER ] . ID ;

    ID              shift and go to state 59


state 43

    (10) new_reg -> BIT [ NATURAL_NUMBER ] . ID ;

    ID              shift and go to state 60


state 44

    (19) qarg -> ID [ NATURAL_NUMBER . ]

    ]               shift and go to state 61


state 45

    (24) expr -> ID ( . expr )
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 62
    term                           shift and go to state 32

state 46

    (23) expr -> ( expr . )
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

    )               shift and go to state 63
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53


state 47

    (12) gate_op -> ID ( params ) . qargs
    (16) qargs -> . qarg , qargs
    (17) qargs -> . qarg ;
    (18) qarg -> . ID
    (19) qarg -> . ID [ NATURAL_NUMBER ]

    ID              shift and go to state 19

    qargs                          shift and go to state 64
    qarg                           shift and go to state 23

state 48

    (20) params -> expr , . params
    (20) params -> . expr , params
    (21) params -> . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 31
    params                         shift and go to state 65
    term                           shift and go to state 32

state 49

    (27) expr -> expr * . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 66
    term                           shift and go to state 32

state 50

    (28) expr -> expr / . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 67
    term                           shift and go to state 32

state 51

    (29) expr -> expr + . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 68
    term                           shift and go to state 32

state 52

    (30) expr -> expr - . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 69
    term                           shift and go to state 32

state 53

    (31) expr -> expr ^ . expr
    (22) expr -> . term
    (23) expr -> . ( expr )
    (24) expr -> . ID ( expr )
    (25) expr -> . - expr
    (26) expr -> . + expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr + expr
    (30) expr -> . expr - expr
    (31) expr -> . expr ^ expr
    (32) term -> . NUMBER
    (33) term -> . NATURAL_NUMBER
    (34) term -> . PI

    (               shift and go to state 29
    ID              shift and go to state 28
    -               shift and go to state 33
    +               shift and go to state 34
    NUMBER          shift and go to state 35
    NATURAL_NUMBER  shift and go to state 36
    PI              shift and go to state 37

    expr                           shift and go to state 70
    term                           shift and go to state 32

state 54

    (25) expr -> - expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    ,               reduce using rule 25 (expr -> - expr .)
    )               reduce using rule 25 (expr -> - expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53

  ! *               [ reduce using rule 25 (expr -> - expr .) ]
  ! /               [ reduce using rule 25 (expr -> - expr .) ]
  ! +               [ reduce using rule 25 (expr -> - expr .) ]
  ! -               [ reduce using rule 25 (expr -> - expr .) ]
  ! ^               [ reduce using rule 25 (expr -> - expr .) ]


state 55

    (26) expr -> + expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    ,               reduce using rule 26 (expr -> + expr .)
    )               reduce using rule 26 (expr -> + expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53

  ! *               [ reduce using rule 26 (expr -> + expr .) ]
  ! /               [ reduce using rule 26 (expr -> + expr .) ]
  ! +               [ reduce using rule 26 (expr -> + expr .) ]
  ! -               [ reduce using rule 26 (expr -> + expr .) ]
  ! ^               [ reduce using rule 26 (expr -> + expr .) ]


state 56

    (14) carg -> ID [ NATURAL_NUMBER ] .

    ASSIGN          reduce using rule 14 (carg -> ID [ NATURAL_NUMBER ] .)


state 57

    (16) qargs -> qarg , qargs .

    ID              reduce using rule 16 (qargs -> qarg , qargs .)
    STDGATES        reduce using rule 16 (qargs -> qarg , qargs .)
    QUBIT           reduce using rule 16 (qargs -> qarg , qargs .)
    BIT             reduce using rule 16 (qargs -> qarg , qargs .)
    $end            reduce using rule 16 (qargs -> qarg , qargs .)


state 58

    (13) measurement -> carg ASSIGN MEASURE qarg . ;

    ;               shift and go to state 71


state 59

    (9) new_reg -> QUBIT [ NATURAL_NUMBER ] ID . ;

    ;               shift and go to state 72


state 60

    (10) new_reg -> BIT [ NATURAL_NUMBER ] ID . ;

    ;               shift and go to state 73


state 61

    (19) qarg -> ID [ NATURAL_NUMBER ] .

    ,               reduce using rule 19 (qarg -> ID [ NATURAL_NUMBER ] .)
    ;               reduce using rule 19 (qarg -> ID [ NATURAL_NUMBER ] .)


state 62

    (24) expr -> ID ( expr . )
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

    )               shift and go to state 74
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53


state 63

    (23) expr -> ( expr ) .

    ,               reduce using rule 23 (expr -> ( expr ) .)
    *               reduce using rule 23 (expr -> ( expr ) .)
    /               reduce using rule 23 (expr -> ( expr ) .)
    +               reduce using rule 23 (expr -> ( expr ) .)
    -               reduce using rule 23 (expr -> ( expr ) .)
    ^               reduce using rule 23 (expr -> ( expr ) .)
    )               reduce using rule 23 (expr -> ( expr ) .)


state 64

    (12) gate_op -> ID ( params ) qargs .

    ID              reduce using rule 12 (gate_op -> ID ( params ) qargs .)
    STDGATES        reduce using rule 12 (gate_op -> ID ( params ) qargs .)
    QUBIT           reduce using rule 12 (gate_op -> ID ( params ) qargs .)
    BIT             reduce using rule 12 (gate_op -> ID ( params ) qargs .)
    $end            reduce using rule 12 (gate_op -> ID ( params ) qargs .)


state 65

    (20) params -> expr , params .

    )               reduce using rule 20 (params -> expr , params .)


state 66

    (27) expr -> expr * expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    ,               reduce using rule 27 (expr -> expr * expr .)
    )               reduce using rule 27 (expr -> expr * expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53

  ! *               [ reduce using rule 27 (expr -> expr * expr .) ]
  ! /               [ reduce using rule 27 (expr -> expr * expr .) ]
  ! +               [ reduce using rule 27 (expr -> expr * expr .) ]
  ! -               [ reduce using rule 27 (expr -> expr * expr .) ]
  ! ^               [ reduce using rule 27 (expr -> expr * expr .) ]


state 67

    (28) expr -> expr / expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    ,               reduce using rule 28 (expr -> expr / expr .)
    )               reduce using rule 28 (expr -> expr / expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53

  ! *               [ reduce using rule 28 (expr -> expr / expr .) ]
  ! /               [ reduce using rule 28 (expr -> expr / expr .) ]
  ! +               [ reduce using rule 28 (expr -> expr / expr .) ]
  ! -               [ reduce using rule 28 (expr -> expr / expr .) ]
  ! ^               [ reduce using rule 28 (expr -> expr / expr .) ]


state 68

    (29) expr -> expr + expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    ,               reduce using rule 29 (expr -> expr + expr .)
    )               reduce using rule 29 (expr -> expr + expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53

  ! *               [ reduce using rule 29 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 29 (expr -> expr + expr .) ]
  ! +               [ reduce using rule 29 (expr -> expr + expr .) ]
  ! -               [ reduce using rule 29 (expr -> expr + expr .) ]
  ! ^               [ reduce using rule 29 (expr -> expr + expr .) ]


state 69

    (30) expr -> expr - expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    ,               reduce using rule 30 (expr -> expr - expr .)
    )               reduce using rule 30 (expr -> expr - expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53

  ! *               [ reduce using rule 30 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 30 (expr -> expr - expr .) ]
  ! +               [ reduce using rule 30 (expr -> expr - expr .) ]
  ! -               [ reduce using rule 30 (expr -> expr - expr .) ]
  ! ^               [ reduce using rule 30 (expr -> expr - expr .) ]


state 70

    (31) expr -> expr ^ expr .
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . + expr
    (30) expr -> expr . - expr
    (31) expr -> expr . ^ expr

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    ,               reduce using rule 31 (expr -> expr ^ expr .)
    )               reduce using rule 31 (expr -> expr ^ expr .)
    *               shift and go to state 49
    /               shift and go to state 50
    +               shift and go to state 51
    -               shift and go to state 52
    ^               shift and go to state 53

  ! *               [ reduce using rule 31 (expr -> expr ^ expr .) ]
  ! /               [ reduce using rule 31 (expr -> expr ^ expr .) ]
  ! +               [ reduce using rule 31 (expr -> expr ^ expr .) ]
  ! -               [ reduce using rule 31 (expr -> expr ^ expr .) ]
  ! ^               [ reduce using rule 31 (expr -> expr ^ expr .) ]


state 71

    (13) measurement -> carg ASSIGN MEASURE qarg ; .

    ID              reduce using rule 13 (measurement -> carg ASSIGN MEASURE qarg ; .)
    STDGATES        reduce using rule 13 (measurement -> carg ASSIGN MEASURE qarg ; .)
    QUBIT           reduce using rule 13 (measurement -> carg ASSIGN MEASURE qarg ; .)
    BIT             reduce using rule 13 (measurement -> carg ASSIGN MEASURE qarg ; .)
    $end            reduce using rule 13 (measurement -> carg ASSIGN MEASURE qarg ; .)


state 72

    (9) new_reg -> QUBIT [ NATURAL_NUMBER ] ID ; .

    QUBIT           reduce using rule 9 (new_reg -> QUBIT [ NATURAL_NUMBER ] ID ; .)
    BIT             reduce using rule 9 (new_reg -> QUBIT [ NATURAL_NUMBER ] ID ; .)
    ID              reduce using rule 9 (new_reg -> QUBIT [ NATURAL_NUMBER ] ID ; .)
    STDGATES        reduce using rule 9 (new_reg -> QUBIT [ NATURAL_NUMBER ] ID ; .)
    $end            reduce using rule 9 (new_reg -> QUBIT [ NATURAL_NUMBER ] ID ; .)


state 73

    (10) new_reg -> BIT [ NATURAL_NUMBER ] ID ; .

    QUBIT           reduce using rule 10 (new_reg -> BIT [ NATURAL_NUMBER ] ID ; .)
    BIT             reduce using rule 10 (new_reg -> BIT [ NATURAL_NUMBER ] ID ; .)
    ID              reduce using rule 10 (new_reg -> BIT [ NATURAL_NUMBER ] ID ; .)
    STDGATES        reduce using rule 10 (new_reg -> BIT [ NATURAL_NUMBER ] ID ; .)
    $end            reduce using rule 10 (new_reg -> BIT [ NATURAL_NUMBER ] ID ; .)


state 74

    (24) expr -> ID ( expr ) .

    ,               reduce using rule 24 (expr -> ID ( expr ) .)
    *               reduce using rule 24 (expr -> ID ( expr ) .)
    /               reduce using rule 24 (expr -> ID ( expr ) .)
    +               reduce using rule 24 (expr -> ID ( expr ) .)
    -               reduce using rule 24 (expr -> ID ( expr ) .)
    ^               reduce using rule 24 (expr -> ID ( expr ) .)
    )               reduce using rule 24 (expr -> ID ( expr ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for STDGATES in state 2 resolved as shift
WARNING: shift/reduce conflict for QUBIT in state 2 resolved as shift
WARNING: shift/reduce conflict for BIT in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 7 resolved as shift
WARNING: shift/reduce conflict for QUBIT in state 8 resolved as shift
WARNING: shift/reduce conflict for BIT in state 8 resolved as shift
WARNING: shift/reduce conflict for ID in state 16 resolved as shift
WARNING: shift/reduce conflict for * in state 54 resolved as shift
WARNING: shift/reduce conflict for / in state 54 resolved as shift
WARNING: shift/reduce conflict for + in state 54 resolved as shift
WARNING: shift/reduce conflict for - in state 54 resolved as shift
WARNING: shift/reduce conflict for ^ in state 54 resolved as shift
WARNING: shift/reduce conflict for * in state 55 resolved as shift
WARNING: shift/reduce conflict for / in state 55 resolved as shift
WARNING: shift/reduce conflict for + in state 55 resolved as shift
WARNING: shift/reduce conflict for - in state 55 resolved as shift
WARNING: shift/reduce conflict for ^ in state 55 resolved as shift
WARNING: shift/reduce conflict for * in state 66 resolved as shift
WARNING: shift/reduce conflict for / in state 66 resolved as shift
WARNING: shift/reduce conflict for + in state 66 resolved as shift
WARNING: shift/reduce conflict for - in state 66 resolved as shift
WARNING: shift/reduce conflict for ^ in state 66 resolved as shift
WARNING: shift/reduce conflict for * in state 67 resolved as shift
WARNING: shift/reduce conflict for / in state 67 resolved as shift
WARNING: shift/reduce conflict for + in state 67 resolved as shift
WARNING: shift/reduce conflict for - in state 67 resolved as shift
WARNING: shift/reduce conflict for ^ in state 67 resolved as shift
WARNING: shift/reduce conflict for * in state 68 resolved as shift
WARNING: shift/reduce conflict for / in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 68 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for ^ in state 68 resolved as shift
WARNING: shift/reduce conflict for * in state 69 resolved as shift
WARNING: shift/reduce conflict for / in state 69 resolved as shift
WARNING: shift/reduce conflict for + in state 69 resolved as shift
WARNING: shift/reduce conflict for - in state 69 resolved as shift
WARNING: shift/reduce conflict for ^ in state 69 resolved as shift
WARNING: shift/reduce conflict for * in state 70 resolved as shift
WARNING: shift/reduce conflict for / in state 70 resolved as shift
WARNING: shift/reduce conflict for + in state 70 resolved as shift
WARNING: shift/reduce conflict for - in state 70 resolved as shift
WARNING: shift/reduce conflict for ^ in state 70 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (start -> qasm)
WARNING: rejected rule (empty -> <empty>) in state 2
